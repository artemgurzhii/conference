"use strict";

/******/(function (modules) {
	// webpackBootstrap
	/******/ // The module cache
	/******/var installedModules = {};

	/******/ // The require function
	/******/function __webpack_require__(moduleId) {

		/******/ // Check if module is in cache
		/******/if (installedModules[moduleId])
			/******/return installedModules[moduleId].exports;

		/******/ // Create a new module (and put it into the cache)
		/******/var module = installedModules[moduleId] = {
			/******/exports: {},
			/******/id: moduleId,
			/******/loaded: false
			/******/ };

		/******/ // Execute the module function
		/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

		/******/ // Flag the module as loaded
		/******/module.loaded = true;

		/******/ // Return the exports of the module
		/******/return module.exports;
		/******/
	}

	/******/ // expose the modules object (__webpack_modules__)
	/******/__webpack_require__.m = modules;

	/******/ // expose the module cache
	/******/__webpack_require__.c = installedModules;

	/******/ // __webpack_public_path__
	/******/__webpack_require__.p = "";

	/******/ // Load entry module and return exports
	/******/return __webpack_require__(0);
	/******/
})(
/************************************************************************/
/******/[
/* 0 */
/***/function (module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(2);

	if (window.location.href.indexOf('contact') > -1 || window.location.href === "http://localhost:3000/contact/") {
		__webpack_require__(3);
	}

	// if (window.location.href === "http://localhost:3000/") {
	//   require('./libs/jekyllSearch');
	//   require('./libs/searchConfig');
	//   require('./modules/search');
	// }

	// (() => {
	//   import geolocator from './libs/geolocator';
	//   import xhr from './modules/xhr';
	//   import validateEmail from './modules/validateEmail';
	//   import jekyllSearch from './libs/jekyllSearch';
	//   import searchConfig from './libs/searchConfig';
	//   import search from './modules/search';
	// })();

	/***/
},
/* 1 */
/***/function (module, exports) {

	{
		var geolocator = function () {

			'use strict';

			var onSuccess,
			    onError,
			    mCanvasId,
			    googleLoaderURL = 'https://www.google.com/jsapi',
			    mapsVersion = '3.18',
			    ipGeoSources = [{ url: '//freegeoip.net/json/', cbParam: 'callback' }, { url: '//www.geoplugin.net/json.gp', cbParam: 'jsoncallback' }, { url: '//geoiplookup.wikimedia.org/', cbParam: '' }],
			    defaultSourceIndex = 1,
			    sourceIndex;

			function loadScript(url, callback, removeOnCallback) {
				var script = document.createElement('script');
				script.async = true;

				function execCb(cb, data) {
					if (removeOnCallback && script.parentNode) {
						script.parentNode.removeChild(script);
					}
					if (typeof cb === 'function') {
						cb(data);
					}
				}

				if (script.readyState) {
					script.onreadystatechange = function (e) {
						if (script.readyState === 'loaded' || script.readyState === 'complete') {
							script.onreadystatechange = null;
							execCb(callback);
						}
					};
				} else {
					script.onload = function (e) {
						execCb(callback);
					};
				}

				script.onerror = function (e) {
					var errMsg = 'Could not load source at ' + String(url).replace(/\?.*$/, '');
					execCb(onError, new Error(errMsg));
				};

				script.src = url;
				document.getElementsByTagName('head')[0].appendChild(script);
			}

			function loadGoogleMaps(callback) {
				function loadMaps() {
					if (geolocator.__glcb) {
						delete geolocator.__glcb;
					}
					google.load('maps', mapsVersion, { other_params: '', callback: callback });
				}
				if (window.google !== undefined && google.maps !== undefined) {
					if (callback) {
						callback();
					}
				} else {
					if (window.google !== undefined && google.loader !== undefined) {
						loadMaps();
					} else {
						geolocator.__glcb = loadMaps;
						loadScript(googleLoaderURL + '?callback=geolocator.__glcb');
					}
				}
			}

			function drawMap(elemId, mapOptions, infoContent) {
				var map,
				    marker,
				    infowindow,
				    elem = document.getElementById(elemId);
				if (elem) {
					map = new google.maps.Map(elem, mapOptions);
					marker = new google.maps.Marker({
						position: mapOptions.center,
						map: map
					});
					infowindow = new google.maps.InfoWindow();
					infowindow.setContent(infoContent);
					google.maps.event.addListener(marker, 'click', function () {
						infowindow.open(map, marker);
					});
					geolocator.location.map = {
						canvas: elem,
						map: map,
						options: mapOptions,
						marker: marker,
						infoWindow: infowindow
					};
				} else {
					geolocator.location.map = null;
				}
			}

			function reverseGeoLookup(latlng, callback) {
				var geocoder = new google.maps.Geocoder();
				function onReverseGeo(results, status) {
					if (status === google.maps.GeocoderStatus.OK) {
						if (callback) {
							callback(results);
						}
					}
				}
				geocoder.geocode({ 'latLng': latlng }, onReverseGeo);
			}

			function fetchDetailsFromLookup(data) {
				if (data && data.length > 0) {
					var i,
					    c,
					    o = {},
					    comps = data[0].address_components;
					for (i = 0; i < comps.length; i += 1) {
						c = comps[i];
						if (c.types && c.types.length > 0) {
							o[c.types[0]] = c.long_name;
							o[c.types[0] + '_s'] = c.short_name;
						}
					}
					geolocator.location.formattedAddress = data[0].formatted_address;
					geolocator.location.address = {
						street: o.route || '',
						neighborhood: o.neighborhood || '',
						town: o.sublocality || '',
						city: o.locality || '',
						region: o.administrative_area_level_1 || '',
						country: o.country || '',
						countryCode: o.country_s || '',
						postalCode: o.postal_code || '',
						streetNumber: o.street_number || ''
					};
				}
			}

			function finalize(coords) {
				var latlng = new google.maps.LatLng(coords.latitude, coords.longitude);
				function onGeoLookup(data) {
					fetchDetailsFromLookup(data);
					var zoom = geolocator.location.ipGeoSource === null ? 14 : 7,
					    mapOptions = {
						zoom: zoom,
						center: latlng,
						mapTypeId: 'roadmap'
					};
					drawMap(mCanvasId, mapOptions, data[0].formatted_address);
					if (onSuccess) {
						onSuccess.call(null, geolocator.location);
					}
				}
				reverseGeoLookup(latlng, onGeoLookup);
			}

			function getPosition(fallbackToIP, html5Options) {
				geolocator.location = null;

				function fallback(error) {
					var ipsIndex = fallbackToIP === true ? 0 : typeof fallbackToIP === 'number' ? fallbackToIP : -1;
					if (ipsIndex >= 0) {
						geolocator.locateByIP(onSuccess, onError, ipsIndex, mCanvasId);
					} else {
						if (onError) {
							onError(error);
						}
					}
				}

				function geoSuccess(position) {
					geolocator.location = {
						ipGeoSource: null,
						coords: position.coords,
						timestamp: new Date().getTime()
					};
					finalize(geolocator.location.coords);
				}

				function geoError(error) {
					fallback(error);
				}

				if (navigator.geolocation) {
					navigator.geolocation.getCurrentPosition(geoSuccess, geoError, html5Options);
				} else {
					fallback(new Error('geolocation is not supported.'));
				}
			}

			function buildLocation(ipSourceIndex, data) {
				switch (ipSourceIndex) {
					case 0:
						geolocator.location = {
							coords: {
								latitude: data.latitude,
								longitude: data.longitude
							},
							address: {
								city: data.city,
								country: data.country_name,
								countryCode: data.country_code,
								region: data.region_name
							}
						};
						break;
					case 1:
						geolocator.location = {
							coords: {
								latitude: data.geoplugin_latitude,
								longitude: data.geoplugin_longitude
							},
							address: {
								city: data.geoplugin_city,
								country: data.geoplugin_countryName,
								countryCode: data.geoplugin_countryCode,
								region: data.geoplugin_regionName
							}
						};
						break;
					case 2:
						geolocator.location = {
							coords: {
								latitude: data.lat,
								longitude: data.lon
							},
							address: {
								city: data.city,
								country: '',
								countryCode: data.country,
								region: ''
							}
						};
						break;
				}
				if (geolocator.location) {
					geolocator.location.coords.accuracy = null;
					geolocator.location.coords.altitude = null;
					geolocator.location.coords.altitudeAccuracy = null;
					geolocator.location.coords.heading = null;
					geolocator.location.coords.speed = null;
					geolocator.location.timestamp = new Date().getTime();
					geolocator.location.ipGeoSource = ipGeoSources[ipSourceIndex];
					geolocator.location.ipGeoSource.data = data;
				}
			}

			function onGeoSourceCallback(data) {
				var initialized = false;
				geolocator.location = null;
				delete geolocator.__ipscb;

				function gLoadCallback() {
					if (sourceIndex === 2) {
						if (window.Geo !== undefined) {
							buildLocation(sourceIndex, window.Geo);
							delete window.Geo;
							initialized = true;
						}
					} else {
						if (data !== undefined && typeof data !== 'string') {
							buildLocation(sourceIndex, data);
							initialized = true;
						}
					}

					if (initialized === true) {
						finalize(geolocator.location.coords);
					} else {
						if (onError) {
							onError(new Error(data || 'Could not get location.'));
						}
					}
				}

				loadGoogleMaps(gLoadCallback);
			}

			function loadIpGeoSource(source) {
				if (source.cbParam === undefined || source.cbParam === null || source.cbParam === '') {
					loadScript(source.url, onGeoSourceCallback, true);
				} else {
					loadScript(source.url + '?' + source.cbParam + '=geolocator.__ipscb', undefined, true);
				}
			}

			return {

				location: null,

				locate: function locate(successCallback, errorCallback, fallbackToIP, html5Options, mapCanvasId) {
					onSuccess = successCallback;
					onError = errorCallback;
					mCanvasId = mapCanvasId;
					function gLoadCallback() {
						getPosition(fallbackToIP, html5Options);
					}
					loadGoogleMaps(gLoadCallback);
				},

				locateByIP: function locateByIP(successCallback, errorCallback, ipSourceIndex, mapCanvasId) {
					sourceIndex = typeof ipSourceIndex !== 'number' || ipSourceIndex < 0 || ipSourceIndex >= ipGeoSources.length ? defaultSourceIndex : ipSourceIndex;
					onSuccess = successCallback;
					onError = errorCallback;
					mCanvasId = mapCanvasId;
					geolocator.__ipscb = onGeoSourceCallback;
					loadIpGeoSource(ipGeoSources[sourceIndex]);
				},

				isPositionError: function isPositionError(error) {
					return Object.prototype.toString.call(error) === '[object PositionError]';
				}
			};
		}();
		{}
	}

	/***/
},
/* 2 */
/***/function (module, exports) {

	var XHR = function XHR() {
		var method = arguments.length <= 0 || arguments[0] === undefined ? 'GET' : arguments[0];
		var url = arguments[1];
		var asyncLoad = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
		var callback = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

		return new Promise(function (resolve, reject) {
			var request = new XMLHttpRequest();
			request.open(method, url, asyncLoad);
			request.send();
			request.onreadystatechange = function () {
				if (request.readyState === 4) {
					if (request.status === 200) {
						var parsed = JSON.parse(request.response);
						resolve(parsed);
					} else {
						reject(request.status + ': ' + request.statusText);
					}
				} else {
					return;
				}
			};
		});
	};
	// XHR('GET', 'http://localhost:3000/data/search.json', true);

	/***/
},
/* 3 */
/***/function (module, exports) {

	var _form = document.querySelector('form.feedback-contact'),
	    _submitButton = _form.querySelector('.submit-feedback'),
	    _input = _form.querySelector('input[type="email"]');

	var validateEmail = function validateEmail(e) {
		var filter = /^(([^<>+()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
		var testing = filter.test(_input.value);
		if (!testing) {
			e.preventDefault();
			_input.classList.add('invalid-email');
		}
	};

	_submitButton.addEventListener('click', validateEmail, false);

	/***/
}
/******/]);
"use strict";

/******/(function (modules) {
	// webpackBootstrap
	/******/ // The module cache
	/******/var installedModules = {};

	/******/ // The require function
	/******/function __webpack_require__(moduleId) {

		/******/ // Check if module is in cache
		/******/if (installedModules[moduleId])
			/******/return installedModules[moduleId].exports;

		/******/ // Create a new module (and put it into the cache)
		/******/var module = installedModules[moduleId] = {
			/******/exports: {},
			/******/id: moduleId,
			/******/loaded: false
			/******/ };

		/******/ // Execute the module function
		/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

		/******/ // Flag the module as loaded
		/******/module.loaded = true;

		/******/ // Return the exports of the module
		/******/return module.exports;
		/******/
	}

	/******/ // expose the modules object (__webpack_modules__)
	/******/__webpack_require__.m = modules;

	/******/ // expose the module cache
	/******/__webpack_require__.c = installedModules;

	/******/ // __webpack_public_path__
	/******/__webpack_require__.p = "";

	/******/ // Load entry module and return exports
	/******/return __webpack_require__(0);
	/******/
})(
/************************************************************************/
/******/[
/* 0 */
/***/function (module, exports, __webpack_require__) {

	var host = "http://artemgurzhii.github.io/";
	if (window.location.host === host && window.location.protocol !== "https:") {
		window.location.protocol = "https:";
	}

	__webpack_require__(1);

	__webpack_require__(2);

	if (window.location.href === 'http://localhost:3000/' || window.location.href.indexOf('page') > -1) {
		__webpack_require__(3);
		__webpack_require__(4);
		__webpack_require__(5);
	}

	if (window.location.href.indexOf('contact') > -1) {
		__webpack_require__(6);
	}

	/***/
},
/* 1 */
/***/function (module, exports) {

	var hasClass = function hasClass(el, className) {
		if (el.classList) {
			return el.classList.contains(className);
		} else {
			return !!el.className.match(new RegExp("(\\s|^)" + className + "(\\s|$)"));
		}
	};

	var addClass = function addClass(el, className) {
		if (el.classList) {
			el.classList.add(className);
		} else if (!hasClass(el, className)) {
			el.className += " " + className;
		}
	};

	var removeClass = function removeClass(el, className) {
		if (el.classList) {
			el.classList.remove(className);
		} else if (hasClass(el, className)) {
			var reg = new RegExp("(\\s|^)" + className + "(\\s|$)");
			el.className = el.className.replace(reg, ' ');
		}
	};

	module.exports = {
		addClass: addClass,
		hasClass: hasClass,
		removeClass: removeClass
	};

	/***/
},
/* 2 */
/***/function (module, exports) {

	var XHR = function XHR() {
		var method = arguments.length <= 0 || arguments[0] === undefined ? 'GET' : arguments[0];
		var url = arguments.length <= 1 || arguments[1] === undefined ? 'http://localhost:3000/data/search.json' : arguments[1];
		var asyncLoad = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
		var callback = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

		return new Promise(function (resolve, reject) {
			var request = new XMLHttpRequest();
			request.open(method, url, asyncLoad);
			request.send();
			request.onreadystatechange = function () {
				if (request.readyState === 4) {
					if (request.status === 200) {
						var parsed = JSON.parse(request.response);
						resolve(parsed);
					} else {
						reject(request.status + ": " + request.statusText);
					}
				} else {
					return;
				}
			};
		});
	};
	// XHR()
	//   .then(
	//     result => console.log(result);
	//   ).catch(
	//     error => console.log(error);
	//   )

	/***/
},
/* 3 */
/***/function (module, exports, __webpack_require__) {
	var _this = this;

	var require;var require;(function e(t, n, r) {
		function s(o, u) {
			if (!n[o]) {
				if (!t[o]) {
					var a = typeof require === "function" && require;
					if (!u && a) {
						return require(o, !0);
					}
					if (i) {
						return i(o, !0);
					}
					throw new Error("Cannot find module '" + o + "'");
				}
				var f = n[o] = {
					exports: {}
				};
				t[o][0].call(f.exports, function (e) {
					var n = t[o][1][e];
					return s(n ? n : e);
				}, f, f.exports, e, t, n, r);
			}
			return n[o].exports;
		}
		var i = typeof require === "function" && require,
		    rLength = r.length;

		for (var o = 0; o < rLength; o += 1) {
			s(r[o]);
		}
		return s;
	})({
		1: [function (require, module, exports) {

			var XHR = function XHR(xhr, callback) {
				return function () {
					if (xhr.readyState === 4) {
						if (xhr.status === 200) {
							callback(null, JSON.parse(xhr.responseText));
						} else {
							callback(xhr.status + ': ' + xhr.statusText);
						}
					} else {
						return;
					}
				};
			};

			var load = function load(location, callback) {
				var request = new XMLHttpRequest();
				request.open('GET', location, true);
				request.send();
				request.onreadystatechange = XHR(request, callback);
			};

			module.exports = {
				load: load
			};
		}, {}],
		2: [function (require, module, exports) {

			module.exports = function OptsValidate(params) {

				var validateParams = function validateParams(params) {
					if (!params) {
						return false;
					}
					return params.required !== undefined && params.required instanceof Array;
				};

				if (!validateParams(params)) {
					throw new Error('Options Validator: required options missing');
				}
				if (!(this instanceof OptsValidate)) {
					return new OptsValidate(params);
				}

				var requiredOptions = params.required;

				this.getRequiredOptions = function () {
					return requiredOptions;
				};

				this.validate = function (param) {
					var errors = [];
					requiredOptions.forEach(function (requiredName) {
						if (param[requiredName] === undefined) {
							errors.push(requiredName);
						}
					});
					return errors;
				};
			};
		}, {}],
		3: [function (require, module, exports) {

			var fuzzySearch = require('./searchType/fuzzySearch');
			var literalSearch = require('./searchType/literalSearch');

			var data = [];
			var opt = {};
			opt.fuzzy = false;
			opt.limit = 10;
			opt.searchStrategy = opt.fuzzy ? fuzzySearch : literalSearch;

			var put = function put(data) {
				if (isObject(data)) {
					return addObject(data);
				}
				if (isArray(data)) {
					return addArray(data);
				}
				return undefined;
			};

			var clear = function clear() {
				data.length = 0;
				return data;
			};

			var get = function get() {
				return data;
			};

			var isObject = function isObject(obj) {
				return !!obj && Object.prototype.toString.call(obj) === '[object Object]';
			};

			var isArray = function isArray(obj) {
				return !!obj && Object.prototype.toString.call(obj) === '[object Array]';
			};

			var addObject = function addObject(_data) {
				data.push(_data);
				return data;
			};

			var addArray = function addArray(_data) {
				var added = [],
				    dataLength = _data.length,
				    i = void 0;
				for (i = 0; i < dataLength; i++) {
					if (isObject(_data[i])) {
						added.push(addObject(_data[i]));
					}
				}
				return added;
			};

			var search = function search(crit) {
				if (!crit) {
					return [];
				}
				return findMatches(data, crit, opt.searchStrategy, opt);
			};

			var setOptions = function setOptions() {
				var _opt = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

				opt.fuzzy = _opt.fuzzy || false;
				opt.limit = _opt.limit || 10;
				opt.searchStrategy = _opt.fuzzy ? fuzzySearch : literalSearch;
			};

			var findMatches = function findMatches(data, crit, strategy, opt) {
				var matches = [];
				var i = void 0;
				var dataLength = data.length;
				var matchesLength = matches.length;
				for (i = 0; i < dataLength && matchesLength < opt.limit; i++) {
					var match = findMatchesInObject(data[i], crit, strategy, opt);
					if (match) {
						matches.push(match);
					}
				}
				return matches;
			};

			var findMatchesInObject = function findMatchesInObject(obj, crit, strategy, opt) {
				for (var key in obj) {
					if (obj.hasOwnProperty(key)) {
						if (!isExcluded(obj[key], opt.exclude) && strategy.matches(obj[key], crit)) {
							return obj;
						}
					}
				}
			};

			var isExcluded = function isExcluded(term) {
				var excludedTerms = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

				var excluded = false,
				    excTermsLength = excludedTerms.length,
				    i = void 0;
				for (i = 0; i < excTermsLength; i++) {
					var excludedTerm = excludedTerms[i];
					if (!excluded && new RegExp(term).test(excludedTerm)) {
						excluded = true;
					}
				}
				return excluded;
			};

			module.exports = {
				put: put,
				clear: clear,
				get: get,
				search: search,
				setOptions: setOptions
			};
		}, {
			"./searchType/fuzzySearch": 4,
			"./searchType/literalSearch": 5
		}],
		4: [function (require, module, exports) {

			function fuzzySearch() {
				this.matches = function (string, crit) {
					if (typeof string !== 'string' || typeof crit !== 'string') {
						return false;
					}
					var fuzzy = crit.split("").reduce(function (a, b) {
						return a + '[^' + b + ']*' + b;
					});
					fuzzy = new RegExp(fuzzy, 'gi');
					return !!fuzzy.test(string);
				};
			}

			module.exports = new fuzzySearch();
		}, {}],
		5: [function (require, module, exports) {

			function literalSearch() {
				this.matches = function (string, crit) {
					if (typeof string !== 'string') {
						return false;
					}
					string = string.trim();
					return string.toLowerCase().indexOf(crit.toLowerCase()) >= 0;
				};
			}

			module.exports = new literalSearch();
		}, {}],
		6: [function (require, module, exports) {

			var options = {};
			options.pattern = /\{(.*?)\}/g;
			options.template = '';
			options.middleware = function () {};

			var setOptions = function setOptions(_options) {
				options.template = _options.template || options.template;
				if (typeof _options.middleware === 'function') {
					options.middleware = _options.middleware;
				}
			};

			var compile = function compile(data) {
				return options.template.replace(options.pattern, function (match, prop) {
					var value = options.middleware(prop, data[prop], options.template);
					if (value !== undefined) {
						return value;
					}
					return data[prop] || match;
				});
			};

			module.exports = {
				compile: compile,
				setOptions: setOptions
			};
		}, {}],
		7: [function (require, module, exports) {
			(function (window, document, undefined) {

				var options = {
					input: null,
					results: null,
					json: [],
					template: '<li><a href="{url}" title="{desc}">{title}</a></li>',
					templateMiddleware: function templateMiddleware() {},
					noResults: 'No results found',
					limit: 10,
					fuzzy: false,
					exclude: []
				};

				var requiredOptions = ['input', 'results', 'json'];
				var templater = require('./Template');
				var repository = require('./Repo');
				var jsonLoader = require('./JSONLoad');
				var optionsValidator = require('./OptsValidate')({
					required: requiredOptions
				});
				var utils = require('./utils');

				var initWithJSON = function initWithJSON(json) {
					repository.put(json);
					registerInput();
				};

				var initWithURL = function initWithURL(url) {
					jsonLoader.load(url, function (err, json) {
						if (err) {
							throwError("failed to get JSON (" + url + ")");
						}
						initWithJSON(json);
					});
				};

				window.jekyllSearch = function (_options) {
					var errors = optionsValidator.validate(_options);
					if (errors.length) {
						throwError("You must specify the following required options: " + requiredOptions);
					}

					options = utils.merge(options, _options);

					templater.setOptions({
						template: options.template,
						middleware: options.templateMiddleware
					});

					repository.setOptions({
						fuzzy: options.fuzzy,
						limit: options.limit
					});

					if (utils.isJSON(options.json)) {
						initWithJSON(options.json);
					} else {
						initWithURL(options.json);
					}
				};

				// for backwards compatibility
				window.jekyllSearch.init = window.jekyllSearch;

				if (typeof window.SimpleJekyllSearchInit === 'function') {
					window.SimpleJekyllSearchInit.call(_this, window.jekyllSearch);
				}

				var emptyResultsContainer = function emptyResultsContainer() {
					options.results.innerHTML = '';
				};

				var appendToResultsContainer = function appendToResultsContainer(text) {
					options.results.innerHTML += text;
				};

				var render = function render(results) {
					var resLength = results.length,
					    i = void 0;
					if (resLength === 0) {
						return appendToResultsContainer(options.noResults);
					}
					for (i = 0; i < resLength; i++) {
						appendToResultsContainer(templater.compile(results[i]));
					}
				};

				var isValidQuery = function isValidQuery(query) {
					return query && query.length > 0;
				};

				var isWhitelistedKey = function isWhitelistedKey(key) {
					return [13, 16, 20, 37, 38, 39, 40, 91].indexOf(key) === -1;
				};

				function throwError(message) {
					throw new Error("Jekyll Search - " + message);
				}

				function registerInput() {
					options.input.addEventListener('keyup', function (e) {
						var key = e.which;
						var query = e.target.value;
						if (isWhitelistedKey(key) && isValidQuery(query)) {
							emptyResultsContainer();
							render(repository.search(query));
						}
						if (options.input.value.length === 0) {
							emptyResultsContainer();
						}
					});
				}
			})(window, document);
		}, {
			"./JSONLoad": 1,
			"./OptsValidate": 2,
			"./Repo": 3,
			"./Template": 6,
			"./utils": 8
		}],
		8: [function (require, module, exports) {

			var merge = function merge(defaultParams, mergeParams) {
				var mergedOptions = {};
				for (var option in defaultParams) {
					if (defaultParams.hasOwnProperty(option)) {
						mergedOptions[option] = defaultParams[option];
						if (mergeParams[option] !== undefined) {
							mergedOptions[option] = mergeParams[option];
						}
					}
				}
				return mergedOptions;
			};

			var isJSON = function isJSON(json) {
				try {
					if (json instanceof Object && JSON.parse(JSON.stringify(json))) {
						return true;
					}
					return false;
				} catch (e) {
					return false;
				}
			};

			module.exports = {
				merge: merge,
				isJSON: isJSON
			};
		}, {}]
	}, {}, [7]);

	/***/
},
/* 4 */
/***/function (module, exports) {

	var jsonUrl = void 0;
	if (window.location.href === 'http://localhost:3000/') {
		jsonUrl = 'data/search.json';
	} else {
		jsonUrl = '../../data/search.json';
	}

	jekyllSearch({
		input: document.getElementsByClassName('search-input')[0],
		results: document.getElementsByClassName('search-results-list')[0],
		template: '<li><a href="{url}">{title} - {date}</a></li>',
		json: jsonUrl,
		noResults: '<li>No results found</li>',
		limit: 10,
		fuzzy: true
	});

	/***/
},
/* 5 */
/***/function (module, exports) {

	var _searchWrap = document.querySelector('div.search-container'),
	    _searchInput = _searchWrap.querySelector('input.search-input'),
	    _searchIcon = _searchWrap.querySelector('i.clear-search-input'),
	    _searchList = _searchWrap.querySelector('ul.search-results-list');

	var remove_searchList = function remove_searchList() {
		while (_searchList.firstChild) {
			_searchList.removeChild(_searchList.firstChild);
		}
		_searchInput.value = '';
	};

	_searchIcon.addEventListener('click', remove_searchList, false);

	/***/
},
/* 6 */
/***/function (module, exports, __webpack_require__) {

	var addClass = __webpack_require__(1).addClass;
	var hasClass = __webpack_require__(1).hasClass;
	var removeClass = __webpack_require__(1).removeClass;

	// Main variables
	var _form = document.querySelector('form.feedback-contact'),
	    _submitButton = _form.querySelector('.submit-feedback'),
	    _name = _form.querySelector('input[type="text"]'),
	    _email = _form.querySelector('input[type="email"]');

	// validate form function
	// ================
	var validateForm = function validateForm(e, filter, inputField, invalidText, validClass, invalidClass) {
		var testing = filter.test(inputField.value); // returning boolean value from testing
		var _para = document.createElement('p'); // creating paragraph
		_para.textContent = invalidText; // and adding text content for invalid input value

		if (inputField.value.length) {
			// if input not empty
			if (!testing) {
				// and if it DIDN'T pass test
				e.preventDefault(); // prevent form from submission
				if (hasClass(inputField, validClass)) {
					// if it has 'valid-input-value' class
					removeClass(inputField, validClass); // remove it (green border)
				}

				if (!hasClass(inputField, invalidClass)) {
					// if it doesn't have 'invalid-input-value' class
					addClass(inputField, invalidClass); // add it (red border)
					inputField.parentNode.insertBefore(_para, inputField.nextSibling); // and add notify message
				}
			} else {
					// if it DID pass test

					if (inputField.parentNode.children.length === 3) {
						// and if it already have notify message
						inputField.parentNode.removeChild(inputField.parentNode.lastElementChild); // remove message
						removeClass(inputField, 'invalid-input-value'); // and remove 'invalid-input-value' class
					}

					addClass(inputField, validClass); // and add 'valid-input-value' class (green border)
				}
		}
	};

	// name validation function
	var validateName = function validateName() {
		var validateNameFilter = /^[a-zA-Z а-яА-Я ]{4,30}$/;
		validateForm(event, validateNameFilter, _name, 'Invalid name', 'valid-input-value', 'invalid-input-value');
	};

	// email validation function
	var validateEmail = function validateEmail() {
		var validateEmailFilter = /^(([^<>+()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
		validateForm(event, validateEmailFilter, _email, 'Invalid email', 'valid-input-value', 'invalid-input-value');
	};

	_submitButton.addEventListener('click', validateName, false); // adding event on 'name' input submit
	_submitButton.addEventListener('click', validateEmail, false); // adding event on 'email' input submit

	/***/
}
/******/]);